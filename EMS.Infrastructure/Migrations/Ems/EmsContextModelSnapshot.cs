// <auto-generated />
using System;
using EMS.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EMS.Infrastructure.Migrations.Ems
{
    [DbContext(typeof(EmsContext))]
    partial class EmsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:ems.consumePartseq", "'consumePartseq', 'ems', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:ems.faultResultseq", "'faultResultseq', 'ems', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:ems.faultseq", "'faultseq', 'ems', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:ems.faultTypeseq", "'faultTypeseq', 'ems', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:ems.fixUnitseq", "'fixUnitseq', 'ems', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:ems.flowseq", "'flowseq', 'ems', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:ems.itemTypeseq", "'itemTypeseq', 'ems', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:ems.locationseq", "'locationseq', 'ems', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:ems.memeberseq", "'memeberseq', 'ems', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:ems.partseq", "'partseq', 'ems', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BuildingBlocks.Infrastructure.Services.Idempotency.ClientRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.ToTable("vielitrequests");
                });

            modelBuilder.Entity("EMS.Domain.AggregatesModel.FaultAggregate.ConsumePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "consumePartseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "ems")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("Count");

                    b.Property<int?>("FaultId");

                    b.Property<int>("PartId");

                    b.Property<string>("PartName");

                    b.HasKey("Id");

                    b.HasIndex("FaultId");

                    b.HasIndex("PartId");

                    b.ToTable("consumeParts","ems");
                });

            modelBuilder.Entity("EMS.Domain.AggregatesModel.FaultAggregate.Fault", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "faultseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "ems")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("FaultStatusId");

                    b.Property<int>("FaultTypeId");

                    b.Property<int>("FixUnitId");

                    b.Property<int>("ItemTypeId");

                    b.Property<int>("LocationId");

                    b.Property<string>("OwnerId")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FaultStatusId");

                    b.HasIndex("FaultTypeId");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("LocationId");

                    b.ToTable("faults","ems");
                });

            modelBuilder.Entity("EMS.Domain.AggregatesModel.FaultAggregate.FaultResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "faultResultseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "ems")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Description");

                    b.Property<int?>("FaultId");

                    b.Property<int>("FixUnitId");

                    b.Property<bool>("IsMoveTo");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FaultId");

                    b.ToTable("faultResults","ems");
                });

            modelBuilder.Entity("EMS.Domain.AggregatesModel.FaultAggregate.FaultStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("faultStatus","ems");
                });

            modelBuilder.Entity("EMS.Domain.AggregatesModel.FaultAggregate.Flow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "flowseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "ems")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int?>("FaultId");

                    b.Property<DateTimeOffset>("Time");

                    b.HasKey("Id");

                    b.HasIndex("FaultId");

                    b.ToTable("flows","ems");
                });

            modelBuilder.Entity("EMS.Domain.AggregatesModel.FaultTypeAggregate.FaultType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "faultTypeseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "ems")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<bool>("IsArchive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("faultTypes","ems");
                });

            modelBuilder.Entity("EMS.Domain.AggregatesModel.FixUnitAggregate.FixUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "fixUnitseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "ems")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("ItemTypeId");

                    b.Property<int>("LocationId");

                    b.Property<string>("Owner")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("fixUnits","ems");
                });

            modelBuilder.Entity("EMS.Domain.AggregatesModel.FixUnitAggregate.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "memeberseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "ems")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("FixUnitId");

                    b.Property<string>("IdentityGuid")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("FixUnitId");

                    b.ToTable("members","ems");
                });

            modelBuilder.Entity("EMS.Domain.AggregatesModel.ItemTypeAggregate.ItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "itemTypeseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "ems")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<bool>("IsArchive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("itemTypes","ems");
                });

            modelBuilder.Entity("EMS.Domain.AggregatesModel.LocationAggregate.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "locationseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "ems")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<bool>("IsArchive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("locations","ems");
                });

            modelBuilder.Entity("EMS.Domain.AggregatesModel.PartAggregate.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "partseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "ems")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<bool>("IsArchive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("parts","ems");
                });

            modelBuilder.Entity("EMS.Domain.AggregatesModel.FaultAggregate.ConsumePart", b =>
                {
                    b.HasOne("EMS.Domain.AggregatesModel.FaultAggregate.Fault")
                        .WithMany("ConsumeParts")
                        .HasForeignKey("FaultId");

                    b.HasOne("EMS.Domain.AggregatesModel.PartAggregate.Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Domain.AggregatesModel.FaultAggregate.Fault", b =>
                {
                    b.HasOne("EMS.Domain.AggregatesModel.FaultAggregate.FaultStatus", "Faultstatus")
                        .WithMany()
                        .HasForeignKey("FaultStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Domain.AggregatesModel.FaultTypeAggregate.FaultType")
                        .WithMany()
                        .HasForeignKey("FaultTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Domain.AggregatesModel.ItemTypeAggregate.ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EMS.Domain.AggregatesModel.LocationAggregate.Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("EMS.Domain.AggregatesModel.FaultAggregate.Assign", "Assign", b1 =>
                        {
                            b1.Property<int>("FaultId");

                            b1.Property<DateTimeOffset?>("Time");

                            b1.Property<string>("UserDisplayName");

                            b1.Property<string>("UserId");

                            b1.HasKey("FaultId");

                            b1.ToTable("faults","ems");

                            b1.HasOne("EMS.Domain.AggregatesModel.FaultAggregate.Fault")
                                .WithOne("Assign")
                                .HasForeignKey("EMS.Domain.AggregatesModel.FaultAggregate.Assign", "FaultId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("EMS.Domain.AggregatesModel.FaultAggregate.FaultResult", b =>
                {
                    b.HasOne("EMS.Domain.AggregatesModel.FaultAggregate.Fault")
                        .WithMany("FaultResults")
                        .HasForeignKey("FaultId");
                });

            modelBuilder.Entity("EMS.Domain.AggregatesModel.FaultAggregate.Flow", b =>
                {
                    b.HasOne("EMS.Domain.AggregatesModel.FaultAggregate.Fault")
                        .WithMany("Flows")
                        .HasForeignKey("FaultId");

                    b.OwnsOne("EMS.Domain.AggregatesModel.FaultAggregate.Unit", "From", b1 =>
                        {
                            b1.Property<int>("FlowId");

                            b1.Property<int>("FixUnitId");

                            b1.Property<string>("FixUnitName");

                            b1.HasKey("FlowId");

                            b1.ToTable("flows","ems");

                            b1.HasOne("EMS.Domain.AggregatesModel.FaultAggregate.Flow")
                                .WithOne("From")
                                .HasForeignKey("EMS.Domain.AggregatesModel.FaultAggregate.Unit", "FlowId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("EMS.Domain.AggregatesModel.FaultAggregate.Unit", "To", b1 =>
                        {
                            b1.Property<int>("FlowId");

                            b1.Property<int>("FixUnitId");

                            b1.Property<string>("FixUnitName");

                            b1.HasKey("FlowId");

                            b1.ToTable("flows","ems");

                            b1.HasOne("EMS.Domain.AggregatesModel.FaultAggregate.Flow")
                                .WithOne("To")
                                .HasForeignKey("EMS.Domain.AggregatesModel.FaultAggregate.Unit", "FlowId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("EMS.Domain.AggregatesModel.FixUnitAggregate.Member", b =>
                {
                    b.HasOne("EMS.Domain.AggregatesModel.FixUnitAggregate.FixUnit")
                        .WithMany("Members")
                        .HasForeignKey("FixUnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EMS.Domain.AggregatesModel.ItemTypeAggregate.ItemType", b =>
                {
                    b.HasOne("EMS.Domain.AggregatesModel.ItemTypeAggregate.ItemType", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("EMS.Domain.AggregatesModel.LocationAggregate.Location", b =>
                {
                    b.HasOne("EMS.Domain.AggregatesModel.LocationAggregate.Location", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });
#pragma warning restore 612, 618
        }
    }
}
